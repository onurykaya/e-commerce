{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport const useForm = (initial = {}) => {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  const handleChange = e => {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value = e.target.files[0];\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  };\n\n  const resetForm = () => {\n    setInputs(initial);\n  };\n\n  const clearForm = () => {\n    var _Object$entries;\n\n    const blankState = Object.fromEntries((_Object$entries = Object.entries(inputs)) === null || _Object$entries === void 0 ? void 0 : _Object$entries.map(([key, value]) => [key, '']));\n    setInputs(blankState);\n  }; // return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm\n  };\n};","map":{"version":3,"sources":["/Users/onuryerlikaya/Desktop/e-commerce-app/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AACvC,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AACA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACD;;AACD,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnBF,MAAAA,KAAK,GAAGD,CAAC,CAACI,MAAF,CAASE,KAAT,CAAe,CAAf,CAAR;AACD;;AAEDR,IAAAA,SAAS,iCACJD,MADI;AAEP,OAACK,IAAD,GAAQD;AAFD,OAAT;AAID,GAbD;;AAeA,QAAMM,SAAS,GAAG,MAAM;AACtBT,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAFD;;AAIA,QAAMY,SAAS,GAAG,MAAM;AAAA;;AACtB,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,oBACjBD,MAAM,CAACE,OAAP,CAAef,MAAf,CADiB,oDACjB,gBAAwBgB,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMb,KAAN,CAAD,KAAkB,CAACa,GAAD,EAAM,EAAN,CAA9C,CADiB,CAAnB;AAGAhB,IAAAA,SAAS,CAACW,UAAD,CAAT;AACD,GALD,CAtBuC,CA6BvC;;;AACA,SAAO;AACLZ,IAAAA,MADK;AAELE,IAAAA,YAFK;AAGLQ,IAAAA,SAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,CApCM","sourcesContent":["import { useState } from 'react';\n\nexport const useForm = (initial = {}) => {\n  const [inputs, setInputs] = useState(initial);\n\n  const handleChange = (e) => {\n    let { value, name, type } = e.target;\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n    if (type === 'file') {\n      value = e.target.files[0];\n    }\n\n    setInputs({\n      ...inputs,\n      [name]: value,\n    });\n  };\n\n  const resetForm = () => {\n    setInputs(initial);\n  };\n\n  const clearForm = () => {\n    const blankState = Object.fromEntries(\n      Object.entries(inputs)?.map(([key, value]) => [key, ''])\n    );\n    setInputs(blankState);\n  };\n\n  // return the things we want to surface from this custom hook\n  return {\n    inputs,\n    handleChange,\n    resetForm,\n    clearForm,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}